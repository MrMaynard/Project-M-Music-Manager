/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pmm;

import java.awt.FileDialog;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import static org.apache.commons.io.FileUtils.copyFile;

/**
 *
 * @author Eric
 */
public class PMM extends javax.swing.JFrame implements TreeSelectionListener {

    private String targetPath = "~";
    private String selectedNode;
    boolean canTree = false;
    DefaultTreeModel treeModel;

    public PMM() {
        super("Eric's Project M Music Manager");
        initComponents();
        buildTree();
        if (System.getProperty("os.name").contains("indows")) {
            convertButton.setEnabled(true);
        }

    }

    static String readFile(String path) throws IOException /*    */ {
        String everything = "";
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();

            while (line != null) {
                sb.append(line);
                sb.append(System.lineSeparator());
                line = br.readLine();
            }
            everything = sb.toString();
        }
        return everything;
    }

    private void buildTree() {
        Driver.buildSongListsFromFile();
        DefaultMutableTreeNode rootnode = new DefaultMutableTreeNode("Stages");
        treeModel = new DefaultTreeModel(rootnode);
        jTree.setModel(treeModel);

        DefaultMutableTreeNode temp1;
        TrackNode temp2;
        for (int i = 0; i < Driver.custom.stageList.size(); i++) {
            temp1 = new DefaultMutableTreeNode(
                    Driver.custom.stageList.get(i).name.replaceAll("[^a-zA-Z0-9\\s]", "")
            );

            for (int j = 0; j < Driver.custom.stageList.get(i).trackList.size(); j++) {
                temp2 = new TrackNode(Driver.custom.stageList.get(i).trackList.get(j).name);
                if (!Driver.origin.stageList.get(i).trackList.get(j).name.equals(temp2.nodeName)) {
                    temp2.setStatus("Custom");
                }
                temp1.add(temp2);
            }
            rootnode.add(temp1);
        }

        //Where the tree is initialized:
        jTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTree.addTreeSelectionListener(this);
    }

    @Override
    public void valueChanged(TreeSelectionEvent e) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree.getLastSelectedPathComponent();

        if (node == null) {
            selectedNode = "~";
        } else if (node.isLeaf()) {
            selectedNode = node.toString();

            if (canTree) {
                treeButton.setEnabled(true);
            }
        } else {
            treeButton.setEnabled(false);
            selectedNode = "~";
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        targetButton = new javax.swing.JButton();
        treeButton = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        convertButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        targetButton.setText("Select Project M Folder");
        targetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetButtonActionPerformed(evt);
            }
        });

        treeButton.setText("Replace Selected Song");
        treeButton.setEnabled(false);
        treeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeButtonActionPerformed(evt);
            }
        });

        jScrollPane.setViewportView(jTree);

        convertButton.setText("Run BRSTM Converter (Windows Only)");
        convertButton.setEnabled(false);
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane)
                    .addComponent(convertButton, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                    .addComponent(treeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(targetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(convertButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(targetButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(treeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void targetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetButtonActionPerformed

        if (convertButton.isEnabled()) {//if we have windows we can use file chooser
            JFileChooser chooser = new JFileChooser();
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnVal = chooser.showOpenDialog(targetButton);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                targetPath
                        = chooser.getSelectedFile().getAbsolutePath();
                if (!targetPath.contains("projectm")) {
                    JOptionPane.showMessageDialog(null, "That doesn't look like the right folder, but okay...");
                }
                targetPath += "/pf/sound/strm/";
                targetButton.setText("Update Target");
                canTree = true;

            }
        } else {//it's a mac
            JOptionPane.showMessageDialog(null, "It appears you're not on Windows.\nPlease actually select the 'info.xml' file inside your 'Project M' folder");
            FileDialog fd = new FileDialog(this);
            fd.setLocation(50, 50);
            fd.setVisible(true);
            fd.setMode(FileDialog.LOAD);
            targetPath = fd.getDirectory();

            if (targetPath != null) {
                if (!targetPath.contains("projectm")) {
                    JOptionPane.showMessageDialog(null, "That doesn't look like the right folder, but okay...");
                }
                targetPath += "pf/sound/strm/";
                //JOptionPane.showMessageDialog(null, targetPath);
                targetButton.setText("Update Target");
                canTree = true;
            }
        }


    }//GEN-LAST:event_targetButtonActionPerformed

    private void treeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeButtonActionPerformed
        Object[] options = {"Select new music",
            "Restore default",
            "Cancel"};
        int n = JOptionPane.showOptionDialog(null,
                "How do you want to replace this song?",
                "Replace Track",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[2]);
        if (n == 0) {
            if (convertButton.isEnabled()) {//windows machine
                JFileChooser chooser = new JFileChooser();
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Brawl Music Files", "brstm");
                chooser.setFileFilter(filter);
                int returnVal = chooser.showOpenDialog(targetButton);
                String newSong;
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    newSong
                            = chooser.getSelectedFile().getAbsolutePath();
                    String songName = JOptionPane.showInputDialog(this, "Input a name for the new song:");
                    if (songName != null) {
                        newSong = newSong.replaceAll("-", "_");
                        if (replace(newSong)) {
                            newSongUpdate(newSong, songName);
                            ((TrackNode) jTree.getLastSelectedPathComponent()).setStatus("Custom");
                            ((TrackNode) jTree.getLastSelectedPathComponent()).nodeName = songName;
                            treeModel.nodeChanged((TrackNode) jTree.getLastSelectedPathComponent());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please input a name next time bruh");
                    }

                }
            } else {//its a mac
                FileDialog fd = new FileDialog(this);
                fd.setLocation(50, 50);
                fd.setVisible(true);
                String s = fd.getFile();
                if (s != null) {
                    String newSong;
                    newSong
                            = new File(s).getAbsolutePath();
                    String songName = JOptionPane.showInputDialog(this, "Input a name for the new song:");
                    if (songName != null) {
                        newSong = newSong.replaceAll("-", "_");
                        if (replace(newSong)) {
                            newSongUpdate(newSong, songName);
                            ((TrackNode) jTree.getLastSelectedPathComponent()).setStatus("Custom");
                            ((TrackNode) jTree.getLastSelectedPathComponent()).nodeName = songName;
                            treeModel.nodeChanged((TrackNode) jTree.getLastSelectedPathComponent());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please input a name next time bruh");
                    }
                }
            }

        }

        if (n == 1) {
            if (delete()) {
                String newName = deletionUpdate();
                if (!newName.equals("")) {
                    ((TrackNode) jTree.getLastSelectedPathComponent()).nodeName = newName;
                }
                ((TrackNode) jTree.getLastSelectedPathComponent()).setStatus("Original");
                treeModel.nodeChanged((TrackNode) jTree.getLastSelectedPathComponent());
            }
        }


    }//GEN-LAST:event_treeButtonActionPerformed

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
        Runtime rt = Runtime.getRuntime();
        try {
            Process pr = rt.exec("BRSTM.exe");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Could not locate BRSTM.exe\nIt should be in the same folder as this JAR");
        }
    }//GEN-LAST:event_convertButtonActionPerformed

    private boolean replace(String newSong) {
        if (selectedNode.equals("~")) {
            return false;
        }
        String newName = getNodeIDFromName(selectedNode);
        File newFile = new File(targetPath + newName.substring(0, 3) + ".brstm");
        File songFile = new File(newSong);
       
        
        try {
            newFile.createNewFile();
            songFile.createNewFile();
            newFile = newFile.getCanonicalFile();
            songFile = songFile.getCanonicalFile();
            newFile.delete();
            copyFile(songFile, newFile);
            return true;
        } catch (Exception e) {
            try{
            JOptionPane.showMessageDialog(this, "Apache has failed me... :(\n"
                    + "Could not make the following copy:\n"+songFile+"\nto\n"
                    + newFile);}
            catch (Exception fml){
                
            }
            if( e instanceof NullPointerException)
                JOptionPane.showMessageDialog(null,"It was a null pointer exception");
             else
                JOptionPane.showMessageDialog(null,e.getStackTrace());
            return false;
        }
    }

    private String getNodeIDFromName(String name) {
        System.out.println(name);
        name = name.split("~~~")[0];
        name = name.split(">")[2];
        name = name.replaceAll("\\s", "");
        for (Stage s : Driver.custom.stageList) {
            for (Track t : s.trackList) {
                if (t.name.replaceAll("\\s", "").equals(name)) {
                    return t.ID.substring(0, 3);
                }
            }
        }
        JOptionPane.showMessageDialog(null, "An error has occured.\nHave you been meddling with the .txt files?\n"
                + "I couldn't find an entry with the name:\n" + name);
        return "";
    }

    private boolean delete() {
        String newName = getNodeIDFromName(selectedNode);
        File file = new File(targetPath + newName + ".brstm").getAbsoluteFile();
        if (!file.delete()) {
            JOptionPane.showMessageDialog(this, "It appears this was already the default track.\nNo changes made.");
            return false;
        }
        return true;
    }

    private String deletionUpdate() {
        String originName = "";
        if (!getNodeIDFromName(selectedNode).equals("")) {
            for (int i = 0; i < Driver.custom.lines.length; i++) {

                if (Driver.custom.lines[i].substring(0, 3).equals(getNodeIDFromName(selectedNode))) {
                    Driver.custom.lines[i] = Driver.origin.lines[i];
                    originName = Driver.origin.lines[i].split("-")[1];
                    break;
                }
            }
        }
        update();
        return originName;
    }

    private void newSongUpdate(String newSong, String songName) {

        if (!getNodeIDFromName(selectedNode).equals("")) {
            for (int i = 0; i < Driver.custom.lines.length; i++) {
                if (Driver.custom.lines[i].substring(0, 3).equals(getNodeIDFromName(selectedNode))) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(Driver.custom.lines[i].substring(0, 3));
                    sb.append(" - ");
                    sb.append(songName);
                    sb.append(" - ");
                    sb.append(newSong);
                    Driver.custom.lines[i] = sb.toString();
                    break;
                }
            }
        }
        update();
    }

    private void update() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < Driver.custom.lines.length; i++) {
            sb.append(Driver.custom.lines[i]);
            sb.append(System.lineSeparator());
        }
        new Nerd().write(Driver.custom_file, sb.toString());
        Driver.buildSongListsFromFile();
        //buildTree();
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {

        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PMM g = new PMM();
                g.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convertButton;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTree jTree;
    private javax.swing.JButton targetButton;
    private javax.swing.JButton treeButton;
    // End of variables declaration//GEN-END:variables
}
